package com.thejadetower.ryan.howcanihelp;

import android.app.AlertDialog;
import android.app.FragmentTransaction;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.location.Geocoder;
import android.location.Location;
import android.os.Debug;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.MotionEventCompat;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.UiSettings;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MapStyleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

import java.io.IOException;
import java.util.Map;

public class MapsActivity extends FragmentActivity implements
        GoogleApiClient.OnConnectionFailedListener,
        OnMapReadyCallback,
        View.OnTouchListener,
        GoogleApiClient.ConnectionCallbacks,
        GoogleMap.OnMarkerClickListener,
        GoogleMap.OnMapClickListener{

    //Hack: Singleton to call functions from other places. Probably not ideal? works
    public MapsActivity mapsActivity;

    private final int MAX_ZOOM = 19;
    private final int MIN_ZOOM = 5;
    private final int START_ZOOM = 14;
    private final int MIN_ZOOM_TO_PLACE_MARKER = 16;
    private final float MARKER_PLACE_ZOOM_MAX_ADJUST = 1;
    private final LatLng defaultLatLng = new LatLng(35,-80);

    private final int BUTTON_HOLD_DELAY = 1000;


    private final int INVALID_VALUE = -999;
    private final int MY_PERMISSION_ACCESS_COURSE_LOCATION = 1;

    private GoogleApiClient mGoogleApiClient;
    private GoogleMap mMap;
    private View mapView;
    private Geocoder geocoder;

    private SharedPreferences sharedPref;
    private SharedPreferences.Editor editor;

    private Toast sharedToast;

    private float homeLat;
    private float homeLng;
    private float homeZoom;

    private View houseButton;
    private View pinButton;

    private Handler handeler = new Handler();
    private Runnable setHomeRunnable = new Runnable() {
        @Override
        public void run() {
            //We check if its pressed to ensure user didn't move off
            //Hack, also set unpressed see below hack
            if(houseButton.isPressed()) {
                houseButton.setPressed(false);

                setHome();
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        MyApp.app.mapsActivity = this;

        //Setup preferances for saving simple data locally
        sharedPref = this.getPreferences(MODE_PRIVATE);
        editor = sharedPref.edit();
        sharedToast = Toast.makeText(this, "", Toast.LENGTH_SHORT);

        //Setup home button
        homeLat = sharedPref.getFloat("homeLat",INVALID_VALUE);
        homeLng = sharedPref.getFloat("homeLng",INVALID_VALUE);
        homeZoom = sharedPref.getFloat("homeZoom",INVALID_VALUE);

        //Setup Geocoder
        geocoder = new Geocoder(this);

        //If we don't have location permissions, ask for permission. Otherwise, start the map
        if( !isHomeSet())
        {
            ActivityCompat.requestPermissions(this, new String[]{android.Manifest.permission.ACCESS_COARSE_LOCATION},
                    MY_PERMISSION_ACCESS_COURSE_LOCATION);
        }
        else{
            startMaps();
        }
    }

    @Override
    //If the user doesn't give permission, make the popup appear. Otherwise, do nothing.
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        //Currently setup for just locations
        startMaps();

    }

    //Open the activity
    private void startMaps(){
        setContentView(R.layout.activity_maps);
        //TODO add touch listener

        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }

    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        //Setup the google map
        mMap = googleMap;
        mMap.setMinZoomPreference(MIN_ZOOM);
        mMap.setMaxZoomPreference(MAX_ZOOM);
        mMap.getUiSettings().setTiltGesturesEnabled(false);
        mMap.setOnMapClickListener(this);
        mMap.setMapStyle(MapStyleOptions.loadRawResourceStyle(this, R.raw.mapstyle));

        //Setup UI
        pinButton = findViewById(R.id.pin_button);
        pinButton.setOnTouchListener(this);

        //Start by going to the users phone. If its not available, go to sydney and show the house
        try {
            googleMap.setMyLocationEnabled(true);
            //Setup API and try to connect. When we do, we setup our start position
            if (mGoogleApiClient == null) {
                mGoogleApiClient = new GoogleApiClient.Builder(this)
                        .addConnectionCallbacks(this)
                        .addOnConnectionFailedListener(this)
                        .addApi(LocationServices.API)
                        .build();
                mGoogleApiClient.connect();
            }
        }
        catch(SecurityException error){

            // Setup the home button
            houseButton = findViewById(R.id.home_button);
            houseButton.setVisibility(View.VISIBLE);
            houseButton.setOnTouchListener(this);

            // Add a marker in Sydney and move the camera
            if(isHomeSet()){
                quickMoveCam( homeLat, homeLng, homeZoom);
            }
            else{
                NoGPSDialog gpsDialog = new NoGPSDialog();
                FragmentTransaction ft = getFragmentManager().beginTransaction();
                gpsDialog.show(ft, "gpsDialog");
            }
        }
    }

    public void onGPSDialogResults(){
        if(User.user.city != null){
            try{
                //After prompting for the users city, try to get their cities location
                java.util.List<android.location.Address> userLocations = geocoder.getFromLocationName(User.user.city, 1);

                if(userLocations.size() > 0) {
                    android.location.Address userLocation = userLocations.get(0);
                    homeLat = (float) userLocation.getLatitude();
                    homeLng = (float) userLocation.getLongitude();
                    homeZoom = START_ZOOM;

                    LatLng latLng = new LatLng(homeLat, homeLng);
                    quickMoveCam(latLng, homeZoom);
                    setHome();
                }
                else{
                    easyToast("Location not found.");
                    quickMoveCam(defaultLatLng, MIN_ZOOM);
                }
            }
            catch (IOException ioExceptionError){
                easyToast("Error in GPS Dialog Results");
            }
        }
    }

    @Override
    public boolean onTouch(View v, MotionEvent event) {
        int action = MotionEventCompat.getActionMasked(event);

        Log.d("Test", v.toString());

        if(v.getId() == R.id.home_button){
            switch (action) {
                case (MotionEvent.ACTION_DOWN):
                    houseButton.setPressed(true);
                    handeler.postDelayed(setHomeRunnable, BUTTON_HOLD_DELAY);
                    return true;
                case (MotionEvent.ACTION_UP):
                    //We need to unpress the button when we set home for this HACK
                    //This is the only way I can check if user is on button right now, because button unpresses
                    //And the touch event isn't working
                    if(houseButton.isPressed()){
                        handeler.removeCallbacks(setHomeRunnable);
                        goHome();
                    }
                    houseButton.setPressed(false);
                    return true;
                default:
                    return false;
            }
        }
        return false;
    }

    private void goHome(){
        if(isHomeSet()) {
            LatLng homeLatLng = new LatLng(homeLat, homeLng);
            quickMoveCam(homeLatLng, homeZoom);
        }
        else{
            easyToast("Hold the button to save a home location first");
        }
    }

    private void setHome(){
        CameraPosition camPos = mMap.getCameraPosition();
        homeLat = (float) camPos.target.latitude;
        homeLng = (float) camPos.target.longitude;
        homeZoom = (float) camPos.zoom;

        editor.putFloat("homeLat", homeLat);
        editor.putFloat("homeLng", homeLng);
        editor.putFloat("homeZoom", homeZoom);
        editor.commit();

        easyToast("Home Saved!");
    }

    private boolean isHomeSet(){
        if(homeZoom != INVALID_VALUE && homeLat != INVALID_VALUE && homeLng != INVALID_VALUE){
            return true;
        }
        return false;
    }

    @Override
    public void onConnected(@Nullable Bundle bundle) {
        try {
            Location location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
            if (location != null) {
                LatLng here = new LatLng(location.getLatitude(), location.getLongitude());
                mMap.addMarker(new MarkerOptions().position(here).title("Marker here"));
                quickMoveCam(here, START_ZOOM);
            } else {
                easyToast("Error determining location");
            }
        }
        catch (SecurityException error){
            easyToast(error.getMessage());
        }
    }

    @Override
    public void onConnectionSuspended(int cause) {

    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
        easyToast("Connection Failed");
    }

    private void easyToast(String message){
        sharedToast.setText(message);
        sharedToast.show();
    }

    private void placePin(Pin pinToPlace){
        mMap.addMarker(new MarkerOptions()
                .position(pinToPlace.location)
                .title(pinToPlace.title))
                .setTag(pinToPlace);
    }

    @Override
    public boolean onMarkerClick(final Marker marker) {
        if(marker.getTag() instanceof Pin){
            //TODO: Open the appropriate pin activity using this pins data
        }
        return false;
    }

    public void moveCam(float lat, float lng, float zoom){
        CameraUpdate update = CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), zoom);
        mMap.animateCamera(update);
    }
    public void moveCam(LatLng latLng, float zoom){
        CameraUpdate update = CameraUpdateFactory.newLatLngZoom(latLng, zoom);
        mMap.animateCamera(update);
    }
    public void quickMoveCam(float lat, float lng, float zoom){
        CameraUpdate update = CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), zoom);
        mMap.moveCamera(update);
    }
    public void quickMoveCam(LatLng latLng, float zoom){
        CameraUpdate update = CameraUpdateFactory.newLatLngZoom(latLng, zoom);
        mMap.moveCamera(update);
    }

    @Override
    public void onMapClick(LatLng latLng) {
        float zoom = mMap.getCameraPosition().zoom;


        //Todo: Instead of placing markers, place a temp marker and ask the user if location is good. Then have them make a pin.
        if(zoom > MIN_ZOOM_TO_PLACE_MARKER) {
            moveCam(latLng, zoom);
            mMap.addMarker(new MarkerOptions().position(latLng).title("Marker here"));
        }else if(zoom > MIN_ZOOM_TO_PLACE_MARKER - MARKER_PLACE_ZOOM_MAX_ADJUST){
            moveCam(latLng, MIN_ZOOM_TO_PLACE_MARKER);
            mMap.addMarker(new MarkerOptions().position(latLng).title("Marker here"));
        }else{
            easyToast("Zoom in to place markers more accurately!");
        }
    }
}
